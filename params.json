{"name":"Ruby-nagios","body":"What?\r\n=====\r\nHave you ever had to disable alerts, retry a check\r\nor acknowledge outages on a large amount of service\r\nwith Nagios and hated the web UI for it?\r\n\r\nThis is a CLI tool and Ruby library that parses your\r\nstatus log file and let you query it for information\r\nor create external commands to be piped into the nagios\r\ncommand file.\r\n\r\nYou can get this software here on GitHub or via RubyGems\r\nas *ruby-nagios*\r\n\r\nUsing on the CLI?\r\n=================\r\nFind out what services match a regular expression:\r\n\r\n    nagsrv --list-services --with-service /puppet/\r\n    puppet-freshness\r\n    puppetd\r\n    puppetmaster\r\n\r\nFind hosts with the service /puppet/:\r\n\r\n    nagsrv --list-hosts --with-service /puppet/\r\n    dev1.your.net\r\n    dev2.your.net\r\n    .\r\n    .\r\n\r\nDisable notifications for them all on all hosts:\r\n\r\n    nagsrv.rb --disable-notify --with-service /puppet/\r\n    [1263129006] DISABLE_SVC_NOTIFICATIONS;dev1.your.net;puppet-freshness\r\n    [1263129006] DISABLE_SVC_NOTIFICATIONS;dev1.your.net;puppetd\r\n    [1263129006] DISABLE_SVC_NOTIFICATIONS;dev1.your.net;puppet-freshness\r\n    .\r\n    .\r\n    .\r\n\r\nOnly do it for hosts matching /dev2/:\r\n\r\n    nagsrv.rb --disable-notify --with-service /puppet/ --for-host /dev2/\r\n    [1263129038] DISABLE_SVC_NOTIFICATIONS;dev2.your.net;puppet-freshness\r\n    [1263129038] DISABLE_SVC_NOTIFICATIONS;dev2.your.net;puppetd\r\n\r\nYou can do ack's, force checks etc, see the help or\r\ncomments in the nagsrv.rb script. To actually get\r\nnagios to do these actions just redirect the output\r\nfrom these commands to the Nagios CMD file. On my\r\nmachine that is /var/log/nagios/rw/nagios.cmd.\r\n\r\nUsing from Ruby?\r\n================\r\n\r\nYou can also do the same from within Ruby easily,\r\nthe library lets you search host by any property\r\non a service, here we'll find all hosts with\r\nservice /puppet/ on host /dev2/:\r\n\r\n    require 'rubygems'\r\n    require 'nagios/status'\r\n    nagios = Nagios::Status.new\r\n    nagios.parsestatus(\"status.log\")\r\n\r\n    options = {:forhost => \"/dev2/\", :action => \"${host}\",\r\n               :withservice => \"/puppet/\"}\r\n    services = nagios.find_services(options)\r\n\r\n    puts services.join(\"\\n\")\r\n\r\nThis will in this case just print:\r\n\r\n    dev2.your.net\r\n\r\nIf you didn't specify the :action string it would\r\njust return an array of services found. The :action\r\nstring is a template that lets you return the matches\r\nin any format you like, here's a template to Acknowledge\r\nservices:\r\n\r\n    \"[${tstamp}] ACKNOWLEDGE_SVC_PROBLEM;;${host};${service};1 \\\r\n     ;0;1;#{ENV['USER']};Acknowledged from CLI\"\r\n\r\nThe only variables it supports now is ${host}, ${service}\r\nand ${tstamp} we can easily add more if needed.\r\n\r\nContact?\r\n========\r\n\r\nR.I.Pienaar / rip@devco.net / @ripienaar / http://devco.net/\r\n","tagline":"A CLI tool and Ruby library that parses your status log file and let you query it for information or create external commands","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}